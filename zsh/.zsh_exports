export HISTFILE=~/.zsh_history
export HISTSIZE=100000
export HISTFILESIZE=10000000
export SAVEHIST=$HISTSIZE
export HISTTIMEFORMAT="[%F %T] "
# setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
# setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
# setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
# setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
# setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
# setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
# setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# IF SSH - export GPG_TTY
if [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
	export GPG_TTY=$(tty)
fi

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nano'
else
  export EDITOR='nano'
fi

# Build/extend the SSH connection chain on interactive SSH sessions
if [[ -n "$SSH_CONNECTION" ]]; then
  # Not first hop: append this host
  if [[ -n "$SSH_CONNECTION_CHAIN" ]]; then
    # If this is a re-loaded session (e.g., tmux attach), don't append again.
    if [[ -z "$SSH_SESSION_LOADED" ]]; then
      export SSH_CONNECTION_CHAIN="${SSH_CONNECTION_CHAIN}→$(hostname -s)"
    fi

  else
    # First hop on this chain: seed from a friendly origin label if provided,
    # else attempt reverse-lookup of client IP, else use the raw IP.
    origin="${SSH_ORIGIN_LABEL}"

    if [[ -z "$origin" ]]; then
      client_ip="${SSH_CLIENT%% *}"
      # Try to resolve client IP -> short hostname (Linux/BSD)
      origin="$(getent hosts "$client_ip" 2>/dev/null | awk '{print $2}' | cut -d. -f1)"
      [[ -z "$origin" ]] && origin="$(host -W 1 "$client_ip" 2>/dev/null | awk '/pointer/ {print $5}' | sed 's/\.$//' | cut -d. -f1)"
      [[ -z "$origin" ]] && origin="$client_ip"
    fi

    export SSH_SESSION_LOADED=1
    export SSH_CONNECTION_CHAIN="${origin}→$(hostname -s)"
  fi

  # ---- Display guard for SSH chain (only show if 3+ nodes) ----
  # Build SSH_CONNECTION_CHAIN_SHOW only when there are at least 3 nodes
  # e.g., Laptop→server1→server2. Otherwise, keep it empty so the prompt hides it.
  if [[ -n "$SSH_CONNECTION_CHAIN" ]]; then
    typeset -a __chain_nodes
    __chain_nodes=(${(s:→:)SSH_CONNECTION_CHAIN})
    if (( ${#__chain_nodes} >= 3 )); then
      export SSH_CONNECTION_CHAIN_SHOW="$SSH_CONNECTION_CHAIN"
    else
      unset SSH_CONNECTION_CHAIN_SHOW
    fi
  fi
fi
