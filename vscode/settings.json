{
  // ################################
  // My Customizations
  "telemetry.enableTelemetry": false, // custom - Depricated telemetry flag
  "telemetry.enableCrashReporter": false, // custom - Depricated crash reporting flag
  "telemetry.telemetryLevel": "off", // new telemetry setting
  "audioCues.lineHasWarning": "off",
  "audioCues.lineHasError": "on",
  "audioCues.onDebugBreak": "on",
  "audioCues.volume": 80,
  "editor.fontLigatures": true, // custom
  "editor.formatOnSaveMode": "file", // custom
  "editor.formatOnSave": true, // custom
  "editor.maxTokenizationLineLength": 2000,
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.fontFamily": "'Cascadia Code', 'Fira Code', Menlo, Monaco, 'Courier New', monospace, Powerline", // custom
  "editor.codeActionsOnSave": { // custom
    "source.organizeImports": true // custom
  },
  "editor.detectIndentation": false,
  "editor.rulers": [ // custom // Columns at which to show vertical rulers
    {
      "column": 80,
      "color": "#3a3a3a"
    },
    {
      "column": 90,
      "color": "#b8b8b8"
    },
    {
      "column": 110,
      "color": "#ff0000"
    }
  ],
  "editor.tabSize": 2, // custom When opening a file, `editor.tabSize` and `editor.insertSpaces` will be detected based on the file contents.
  "editor.insertSpaces": true,
  "emmet.triggerExpansionOnTab": true, // custom
  "files.autoSave": "off", // custom
  "files.autoGuessEncoding": true,
  "files.defaultLanguage": "${activeEditorLanguage}", // custom
  "files.trimTrailingWhitespace": true, // custom
  "files.trimFinalNewlines": true, // custom
  "yaml.format.printWidth": 110, // custom
  "terminal.integrated.defaultProfile.osx": "zsh", // custom
  "terminal.integrated.fontFamily": "MesloLGS NF, monospace",
  "window.title": "${remoteName}${separator}${activeEditorMedium}${separator}${rootPath}${dirty}", // custom
  "window.titleSeparator": " : ", // custom
  "window.zoomLevel": 0, // custom
  "workbench.iconTheme": "vscode-icons", // custom
  "workbench.colorTheme": "Cobalt2", // custom
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook"
  },
  "python.analysis.typeCheckingMode": "strict", // custom
  "python.formatting.provider": "black", // custom
  "python.formatting.blackArgs": [
    "--line-length",
    "100"
  ],
  "python.languageServer": "Pylance",
  "python.linting.enabled": true, // custom
  "python.linting.pylintEnabled": true, // custom
  "python.linting.pylintArgs": [
    // "--const-naming-style=snake_case",
    // "--disable=C0103" // disable snake_case warning
  ],
  "python.testing.pytestEnabled": true, // custom
  "python.testing.unittestEnabled": true, // custom
  "redhat.telemetry.enabled": false, // custom
  // #######################
  // Extension settings
  "macros": {
    "commentDown": [
      "editor.action.copyLinesDownAction",
      "cursorUp",
      "editor.action.addCommentLine",
      "cursorDown"
    ]
  },
  "git.path": "/Library/Developer/CommandLineTools",
  "python.pythonPath": "/usr/local/bin/python3",
  "better-comments.highlightPlainText": true,
  "better-comments.tags": [
    {
      "tag": "!",
      "color": "#FF2D00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "?",
      "color": "#3498DB",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "//",
      "color": "#474747",
      "strikethrough": true,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "todo",
      "color": "#FF8C00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "*",
      "color": "#98C379",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    }
  ],
  "explorer.confirmDragAndDrop": false,
  "vscode-yaml-sort.emptyLinesUntilLevel": 1,
  "vscode-yaml-sort.noCompatMode": true,
  "vscode-yaml-sort.customSortKeywords_1": [
    "version",
    "volumes",
    "networks",
    "secrets",
    "services",
    "services.<name>",
    "services.<name>.depents_on",
    "services.<name>.security_opts"
  ],
  "notebook.cellToolbarLocation": {
    "default": "right",
    "jupyter-notebook": "left"
  },
  "advancedNewFile.convenienceOptions": [
    "last",
    "current",
    "root"
  ],
  "folderTemplates.fileTemplates": {
    "Typescript Functional Component": [
      "import React from 'react';",
      "",
      "interface <FTName>Props {",
      "}",
      "",
      "const <FTName> = (props) => {",
      "  return <div/>;",
      "};",
      "",
      "export default <FTName>;"
    ],
    "Ansible Config": [
      "[defaults]",
      "inventory = inventory/hosts",
      "roles_path = roles",
      "; log_path = /var/log/ansible.log",
      "log_path = logs/ansible.log",
      "retry_files_enabled = False"
    ],
    "YAML File": [
      "---",
      ""
    ],
    "Ansible - Tasks - Main": [
      "---",
      "# Load distro-specific variables",
      "- name: import vars",
      "  block:",
      "    - include_vars: '{{ ansible_distribution }}.yaml'",
      "  tags: always",
      "",
      "# Task list for roles/<<rolename>>",
      "#- name: import tasks",
      "#  block:",
      "#    - import_tasks: <taskfile>.yaml"
    ],
    "Ansible - Handlers - Main": [
      "---",
      "# Handlers list for roles/<<rolename>>",
      "#- name: import and run tasks",
      "#  block:",
      "#    - import_tasks: <taskfile>.yaml"
    ]
  },
  "folderTemplates.structures": [
    {
      "name": "Ansible - All",
      // "customVariables": ["CustomVar", "CustomVar2"],
      "omitParentDirectory": true,
      "omitFTName": true,
      "overwriteExistingFiles": "never",
      "structure": [
        {
          "fileName": "ansible.cfg",
          "template": "Ansible Config"
        },
        {
          "fileName": "inventory/hosts"
        },
        {
          "fileName": "group_vars/main.yaml",
          "template": "YAML File"
        },
        {
          "fileName": "host_vars/main.yaml",
          "template": "YAML File"
        },
        {
          "fileName": "host_vars/site.yaml",
          "template": "YAML File"
        },
        {
          "fileName": "logs",
          "template": "EmptyDirectory"
        },
        {
          "fileName": "roles",
          "template": "EmptyDirectory"
        },
        {
          "fileName": "roles/role1/files",
          "template": "EmptyDirectory"
        },
        {
          "fileName": "roles/role1/handlers/main.yaml",
          "template": "Ansible - Handlers - Main"
        },
        {
          "fileName": "roles/role1/tasks/main.yaml",
          "template": "Ansible - Tasks - Main"
        },
        {
          "fileName": "roles/role1/templates",
          "template": "EmptyDirectory"
        },
        {
          "fileName": "roles/role1/vars",
          "template": "EmptyDirectory"
        }
      ]
    },
    {
      "name": "Ansible - New Role",
      // "customVariables": ["RoleName"],
      "omitParentDirectory": true,
      "overwriteExistingFiles": "never",
      "structure": [
        {
          "fileName": "<FTName | lowercase>/defaults/main.yaml",
          "template": "YAML File"
        },
        {
          "fileName": "<FTName | lowercase>/files",
          "template": "EmptyDirectory"
        },
        {
          "fileName": "<FTName | lowercase>/handlers/main.yaml",
          "template": "Ansible - Handlers - Main"
        },
        {
          "fileName": "<FTName | lowercase>/meta/main.yaml",
          "template": "YAML File"
        },
        {
          "fileName": "<FTName | lowercase>/tasks/main.yaml",
          "template": "Ansible - Tasks - Main"
        },
        {
          "fileName": "<FTName | lowercase>/templates",
          "template": "EmptyDirectory"
        },
        {
          "fileName": "<FTName | lowercase>/vars/main.yaml",
          "template": "YAML File"
        }
      ]
    }
  ],
  "yaml.customTags": [
    "!encrypted/pkcs1-oaep scalar",
    "!vault scalar"
  ],
  "ansible.validate.executablePath": "",
  "ansible.ansibleLint.path": "~/Library/Python/3.9/bin/ansible-lint",
  "ansible.ansible.path": "~/Library/Python/3.9/bin/ansible",
  "markdown.styles": [
    "https://use.fontawesome.com/releases/v5.7.1/css/all.css"
  ],
  "terminal.integrated.profiles.osx": {
    "bash": {
      "path": "bash",
      "args": [
        "-l"
      ],
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh",
      "args": [
        "-l"
      ]
    },
    "fish": {
      "path": "fish",
      "args": [
        "-l"
      ]
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    },
    "csh": {
      "path": "/bin/csh"
    }
  },
  // For which languages indent-rainbow should be deactivated (if empty it means none).
  "indentRainbow.excludedLanguages": [
    "plaintext"
  ],
  // The indent color if the number of spaces is not a multiple of "tabSize".
  "indentRainbow.errorColor": "rgba(128,32,32,0.6)",
  // Using the light mode
  // "indentRainbow.indicatorStyle": "classic",
  // we use a simple 1 pixel wide line
  // "indentRainbow.lightIndicatorStyleLineWidth": 1,
  // the same colors as above but more visible
  // "indentRainbow.colors": [
  //   "rgba(255,255,64,0.3)",
  //   "rgba(127,255,127,0.3)",
  //   "rgba(255,127,255,0.3)",
  //   "rgba(79,236,236,0.3)"
  // ]
  "indentRainbow.colors": [
    "rgba(255,255,64,0.07)",
    "rgba(127,255,127,0.07)",
    "rgba(255,127,255,0.07)",
    "rgba(79,236,236,0.07)"
  ],
  "thunder-client.codeSnippetLanguage": "python-requests",
  "diffEditor.ignoreTrimWhitespace": false,
  "todo-tree.general.tags": [
    "BUG",
    "HACK",
    "FIXME",
    "TODO",
    "XXX",
    "[ ]",
    "[]",
    "[  ]",
    "[x]",
    "[X]",
    "REFACTOR",
    "DEPRECATED",
    "ERROR",
    "XXXX",
    "XXXXX",
    "???",
    "??"
  ],
  "todo-tree.general.tagGroups": {
    "FIXME": [
      "FIXME",
      "FIXIT",
      "FIX",
    ],
    "BUG": [
      "BUG",
      "ERROR"
    ],
    "XXX": [
      "XXX",
      "XX",
      "XXXX",
      "XXXXX"
    ],
    "???": [
      "???",
      "??"
    ],
    "[ ]": [
      "[ ]",
      "[]",
      "[  ]"
    ],
    "[x]": [
      "[x]",
      "[X]"
    ],
  },
  "todo-tree.general.statusBar": "current file",
  "todo-tree.highlights.defaultHighlight": {
    "type": "tag"
  },
  "todo-tree.highlights.customHighlight": {
    "BUG": {
      "icon": "bug",
      "iconColour": "red",
      "background": "red",
      "foreground": "black"
    },
    "DEPRECATED": {
      "icon": "stop",
      "iconColour": "grey",
      "background": "grey",
      "foreground": "black"
    },
    "REFACTOR": {
      "icon": "workflow",
      "background": "green",
      "foreground": "black"
    },
    "HACK": {
      "icon": "tools",
      "background": "orange",
      "foreground": "black"
    },
    "FIXME": {
      "icon": "flame",
      "iconColour": "yellow",
      "background": "yellow",
      "foreground": "black"
    },
    "TODO": {
      "icon": "check-circle",
      "background": "green"
    },
    "XXX": {
      "icon": "$(close)",
      "background": "blue"
    },
    "[ ]": {
      "icon": "screen-full",
      "background": "white",
      "foreground": "black"
    },
    "[x]": {
      "icon": "diff-modified",
      "background": "white",
      "foreground": "black"
    },
    "???": {
      "icon": "question",
      "iconColour": "yellow",
      "background": "yellow",
      "foreground": "black"
    }
  },
  "markdown.validate.enabled": true,
  "githubIssues.queries": [
    {
      "label": "My Issues",
      "query": "default"
    },
    {
      "label": "Created Issues",
      "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
    },
    {
      "label": "Recent Issues",
      "query": "state:open repo:${owner}/${repository} sort:updated-desc"
    }
  ],
}